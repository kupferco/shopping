{"ast":null,"code":"import * as React from 'react';\nimport { useContext } from 'react';\nimport RN from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Toast } from \"./Toast\";\nimport { Dialog } from \"./Dialog\";\nimport { Color } from \"../service\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport var Root = function Root(_ref) {\n  var _RN$useColorScheme;\n  var theme = _ref.theme,\n    colors = _ref.colors,\n    children = _ref.children,\n    dialogConfig = _ref.dialogConfig,\n    toastConfig = _ref.toastConfig;\n  var colorScheme = (_RN$useColorScheme = RN.useColorScheme) === null || _RN$useColorScheme === void 0 ? void 0 : _RN$useColorScheme.call(RN);\n  var safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n  var isDark = (theme != null ? theme : colorScheme) === 'dark';\n  if (safeAreaInsetsContext === null) {\n    return React.createElement(SafeAreaProvider, null, React.createElement(View, {\n      style: styles.content\n    }, React.createElement(React.Fragment, null, children, React.createElement(Dialog, {\n      ref: Dialog.instance,\n      isDark: isDark,\n      config: dialogConfig\n    }), React.createElement(Toast, {\n      ref: Toast.instance,\n      isDark: isDark,\n      config: toastConfig\n    }))));\n  }\n  return React.createElement(View, {\n    style: styles.content\n  }, React.createElement(React.Fragment, null, children, React.createElement(Dialog, {\n    ref: Dialog.instance,\n    isDark: isDark,\n    config: dialogConfig\n  }), React.createElement(Toast, {\n    ref: Toast.instance,\n    isDark: isDark,\n    config: toastConfig\n  })));\n};\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","useContext","RN","View","SafeAreaInsetsContext","SafeAreaProvider","Toast","Dialog","Color","StyleSheet","Root","_ref","_RN$useColorScheme","theme","colors","children","dialogConfig","toastConfig","colorScheme","useColorScheme","call","safeAreaInsetsContext","colorsCustom","isDark","createElement","style","styles","content","Fragment","ref","instance","config","create","flex"],"sources":["/Users/dankupfer/Documents/dev/shopping/shopping/ShoppingClient/node_modules/react-native-alert-notification/lib/module/containers/Root.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, useContext } from 'react';\nimport RN, { View } from 'react-native';\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { IConfigToast, Toast } from './Toast';\nimport { Dialog, IConfigDialog} from './Dialog';\n\nimport { Color, IColors } from '../service';\nimport { StyleSheet } from 'react-native';\n\ntype IProps = {\n  dialogConfig?: Pick<IConfigDialog, 'closeOnOverlayTap' | 'autoClose'>;\n  toastConfig?: Pick<IConfigToast, 'autoClose' | 'titleStyle' | 'textBodyStyle'>;\n  theme?: 'light' | 'dark';\n  colors?: [IColors, IColors] /** ['light_colors' , 'dark_colors'] */;\n  children: ReactElement | ReactElement[];\n};\n\nexport const Root: React.FunctionComponent<IProps> = ({ theme, colors, children, dialogConfig, toastConfig }) => {\n  const colorScheme = RN.useColorScheme?.();\n  const safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n\n  const isDark = (theme ?? colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return (\n      <SafeAreaProvider>\n        <View style={styles.content}>\n          <React.Fragment>\n            {children}\n            <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n            <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n          </React.Fragment>\n        </View>\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    <View style={styles.content}>\n      <React.Fragment>\n        {children}\n        <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n        <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n      </React.Fragment>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAuBC,UAAvB,QAAyC,OAAzC;AAAA,OACOC,EAAP;AAAA,OAAAC,IAAA;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,QAAwD,gCAAxD;AACA,SAAuBC,KAAvB;AACA,SAASC,MAAT;AAEA,SAASC,KAAT;AAAA,OAAAC,UAAA;AAWA,OAAO,IAAMC,IAAqC,GAAG,SAAxCA,IAAqCA,CAAGC,IAAA,EAA4D;EAAA,IAAAC,kBAAA;EAAA,IAAzDC,KAAF,GAA2DF,IAAA,CAAzDE,KAAF;IAASC,MAAT,GAA2DH,IAAA,CAAlDG,MAAT;IAAiBC,QAAjB,GAA2DJ,IAAA,CAA1CI,QAAjB;IAA2BC,YAA3B,GAA2DL,IAAA,CAAhCK,YAA3B;IAAyCC,WAAA,GAAkBN,IAAA,CAAlBM,WAAA;EAC7F,IAAMC,WAAW,IAAAN,kBAAA,GAAGV,EAAE,CAACiB,cAAN,cAAAP,kBAAA,uBAAGA,kBAAA,CAAAQ,IAAA,CAAAlB,EAAE,CAAtB;EACA,IAAMmB,qBAAqB,GAAGpB,UAAU,CAACG,qBAAD,CAAxC;EACAI,KAAK,CAACc,YAAN,GAAqBR,MAArB;EAEA,IAAMS,MAAM,GAAG,CAACV,KAAK,WAALA,KAAK,GAAIK,WAAV,MAA2B,MAA1C;EAEA,IAAIG,qBAAqB,KAAK,IAA9B,EAAoC;IAClC,OACErB,KAAA,CAAAwB,aAAA,CAACnB,gBAAD,QACEL,KAAA,CAAAwB,aAAA,CAACrB,IAAD;MAAMsB,KAAK,EAAEC,MAAM,CAACC;IAApB,GACE3B,KAAA,CAAAwB,aAAA,CAACxB,KAAD,CAAO4B,QAAP,QACGb,QADH,EAEEf,KAAA,CAAAwB,aAAA,CAACjB,MAAD;MAAQsB,GAAG,EAAEtB,MAAM,CAACuB,QAApB;MAA8BP,MAAM,EAAEA,MAAtC;MAA8CQ,MAAM,EAAEf;IAAtD,EAFF,EAGEhB,KAAA,CAAAwB,aAAA,CAAClB,KAAD;MAAOuB,GAAG,EAAEvB,KAAK,CAACwB,QAAlB;MAA4BP,MAAM,EAAEA,MAApC;MAA4CQ,MAAM,EAAEd;IAApD,EAHF,CADF,CADF,CADF;EAWD;EAED,OACEjB,KAAA,CAAAwB,aAAA,CAACrB,IAAD;IAAMsB,KAAK,EAAEC,MAAM,CAACC;EAApB,GACE3B,KAAA,CAAAwB,aAAA,CAACxB,KAAD,CAAO4B,QAAP,QACGb,QADH,EAEEf,KAAA,CAAAwB,aAAA,CAACjB,MAAD;IAAQsB,GAAG,EAAEtB,MAAM,CAACuB,QAApB;IAA8BP,MAAM,EAAEA,MAAtC;IAA8CQ,MAAM,EAAEf;EAAtD,EAFF,EAGEhB,KAAA,CAAAwB,aAAA,CAAClB,KAAD;IAAOuB,GAAG,EAAEvB,KAAK,CAACwB,QAAlB;IAA4BP,MAAM,EAAEA,MAApC;IAA4CQ,MAAM,EAAEd;EAApD,EAHF,CADF,CADF;AASD,CA9BM;AAgCP,IAAMS,MAAM,GAAGjB,UAAU,CAACuB,MAAX,CAAkB;EAC/BL,OAAO,EAAE;IACPM,IAAI,EAAE;EADC;AADsB,CAAlB,CAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}